<!DOCTYPE html>
<html lang="en">


<head>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="/public/index.css">
    <!-- <link rel="stylesheet" href="/public/kinship.css"> -->

    <title>测试</title>
    <style>
        * {
            padding:0;
            margin:0
        }
        html,
        body,
        #threeBox {
            height: 100%;
            width: 100%
        }
        #threeBox{
            background:#000;
        }
        .pop-box{
            position: fixed;
            color: #5ecaea;
            background: #999;
            border-radius: 4px;
            padding: 8px;
            display:none;
        }
        .pop-box::after{
            content: "";
            height: 0;
            width: 0;
            border: 5px solid transparent;
            border-top: 10px solid #ffffff55;
            border-bottom: none;
            position: absolute;
            bottom: -10px;
            left: calc(50% - 5px);
        }
        .pop-box>div{
            margin:4px 0;
            height:24px;
        }
        .pop-box span{
            display:block;
            float:left
           
        }
        .pop-box>div>span:first-child{
             width:82px
        }
        .pop-box>div>span:last-child{
            max-width:270px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .select-node{
            width:214px;
            font-size:22px;
            position:absolute;
            top:20px;
            left:20px;
        }
        .select-node>input{
            background: #ccc;
            width: 150px;
            height: 20px;
            border-radius: 4px;
            border: none;
            padding: 4px 8px;
            color: rgba(0,0,0,.65);
        }
        .select-node>input:focus{
            border:none;
            outline:none;
        }
        .select-node>button{
            padding: 4px 8px;
            background: #108ee9;
            border: none;
            color: #fff;
            cursor:pointer;
            
        }
        .select-node>ul{
            width:100%;
            background: #ccc;
            margin-top: 4px;
            max-height:250px;
            overflow-y:auto;
            
        }
        .select-node>ul>li{
            color:#108ee9;
            padding:4px;
        }
    </style>
</head>

<body>
    <div id="threeBox">
    </div>
    <div class="select-node">
        <input id="searchId"/>
        <button>查询</button>
        <ul>
            
            
        </ul>
    </div>
    <script>
        const USER_INFO = {}
    </script>
    <script src="/public/list.js"></script>
    <script src="/public/dagre.min.js"></script>
    <script src="/public/three.min.js"></script>
    <script src="/public/MapControls.js"></script>
    <script src="/public/table_array.js"></script>     

    <script>
        let g = new dagre.graphlib.Graph();

        //{"id":"stg_hdic_base_new_t_zoning_city_da","name":"stg_hdic_base_new_t_zoning_city_da","cname":"城市表","description":"城市表","level":"生产来源数据","lib_name":"stg","type":"楼盘字典基础库","manager":"李陵【liling@lianjia.com】","creator":"李陵【liling@lianjia.com】","create_time":"2016/3/21 15:37","last_modify_time":"2016/3/21 15:37","business_tag":"其它,","task_cycle":"周","validity":"1","fieds_count":"12","table_security_level":"1","fields_secruity_level":"C级,","enum_fill":"是","has_ai":"否","parents":["ods_hdic_fee_t_matched_data_da","ods_hdic_fee_t_net_sign_base_data_da","ods_house","ods_house_zoning_city_da","dim_geography_id_name_map_day","rpt_loushu_feedback_building","rpt_loushu_feedback_resblock","dw_resblock_show"],"children":[],
        let getAncestorNodes = (list, id, direction) => {
            direction = direction || 'up';

            if (!list[id]) {
                console.info(`no ${id}`)
                return;
            }

            let data = { nodes: [Object.assign({ nodeType: 'main' }, list[id])], edges: [] };
            let leafPath = {};
            let nodesIndex = [id];
            let edgeIndexs = [];

            let addParentRelationships = (key, findPath, findNode, currentPath) => {

                let current = list[key];
                if (!current) {
                    return;
                }
                let nexts = direction === 'down' ? current.children : current.parents;
                if (nexts.length > 0) {
                    nexts.forEach(nextKey => {

                        let childCurrentPath = currentPath + "|" + nextKey
                        let childFindNode = findNode
                        let childFindPath = findPath

                        if (childFindNode) {
                            let source = nextKey;
                            let target = key;
                            if (source === target) {
                                childFindNode = false
                                // return
                            } else {
                                if (direction === 'down') {
                                    source = key;
                                    target = nextKey;
                                }

                                let edgeIndex = `${source}-${target}`;

                                if (!edgeIndexs.includes(edgeIndex) && source in list && target in list) {
                                    data.edges.push({ source: source, target: target });
                                    edgeIndexs.push(edgeIndex);
                                }

                                if (!nodesIndex.includes(nextKey)) {
                                    if (!list[nextKey]) {
                                        childFindNode = false
                                        // return
                                    } else {
                                        data.nodes.push(Object.assign({ nodeType: direction }, list[nextKey]));
                                        nodesIndex.push(nextKey);
                                    }
                                } else {
                                    childFindNode = false
                                }
                            }
                        }

                        if (childFindPath) {
                            let pathArr = currentPath.split('|')
                            let index = pathArr.indexOf(nextKey)
                            if (index < 0) {

                            } else if (index !== pathArr.length - 1) {
                                childFindPath = false
                                if (leafPath[nextKey]) {
                                    leafPath[nextKey].push(currentPath)
                                } else {
                                    leafPath[nextKey] = [currentPath]
                                }
                            } else {
                                childFindPath = false
                            }
                        }

                        if (childFindNode || childFindPath) {
                            addParentRelationships(nextKey, childFindPath, childFindNode, childCurrentPath);
                        }

                    });
                } else {
                    if (leafPath[key]) {
                        leafPath[key].push(currentPath)
                    } else {
                        leafPath[key] = [currentPath]
                    }
                }
            }

            let getLeafPath = (key, currentPath) => {

                let current = list[key];
                if (!current) {
                    return;
                }
                let nexts = direction === 'down' ? current.children : current.parents;
                if (nexts.length > 0) {
                    nexts.forEach(nextKey => {
                        let childCurrentPath = currentPath + "|" + nextKey
                        let pathArr = currentPath.split('|')
                        let index = pathArr.indexOf(nextKey)
                        if (index < 0) {
                            getLeafPath(nextKey, childCurrentPath);
                        } else if (index !== pathArr.length - 1) {
                            if (leafPath[nextKey]) {
                                leafPath[nextKey].push(currentPath)
                            } else {
                                leafPath[nextKey] = [currentPath]
                            }
                        }

                    });
                } else {
                    if (leafPath[key]) {
                        leafPath[key].push(currentPath)
                    } else {
                        leafPath[key] = [currentPath]
                    }
                }
            }

            let rootPath = id

            addParentRelationships(id, true, true, rootPath);
            getLeafPath(id, rootPath);

            nodesIndex = undefined;

            return { data, leafPath };
        }
        let list = {}
        data.map((val) => {
            list[val.id] = val;
        })
        // fs.writeFile('./list.js','const list = '+JSON.stringify(list),(err)=>{console.log(err)});

        let keys = Object.keys(list)
        let len = keys.length
        let initRelaData = (nodes, edges) => {


            // Set an object for the graph label
            g.setGraph({
                rankdir: 'RL',
                // nodesep: 50,
                ranksep: 200,
                // edgesep: 20
            });

            // Default to assigning a new object as a label for each new edge.
            g.setDefaultEdgeLabel(function () { return {}; });
            console.time('loop')
            let fontSize = 24
            nodes.map((val, idx) => {
                let width = val.name.length * fontSize+10; //5+5 //左右pading
                g.setNode(val.id, { label: val.name, width, height: 64, nodeType: val.nodeType,name:val.cname });

            })
            edges.map((val, idx) => {
                g.setEdge(val.source, val.target);
            })
            console.timeEnd('loop')
            console.time('layout')
            dagre.layout(g);
            console.timeEnd('layout')

            // console.log(g)
        }

        let getReladata = (id = 'dw_housedel_housedel_all_info_branch_da') => {
            let ALLUP = getAncestorNodes(list, id, 'up')
            let ALLDOWN = getAncestorNodes(list, id, 'down')

            let nodes = ALLUP.data.nodes.concat(ALLDOWN.data.nodes);
            let edges = ALLUP.data.edges.concat(ALLDOWN.data.edges);

            initRelaData(nodes, edges);

            let datas = {
                nodes: [],
                edges: [],
                edgesId:edges,
                center: {
                    centerX: 0,
                    centerY: 0
                }
            }


            g.nodes().forEach(function (v) {
                let node = g.node(v);
                if (node.label === id) {
                    datas.center = {
                        centerX: 0 - node.x,
                        centerY: 0 - node.y
                    }
                    datas.main = node
                }
                datas.nodes.push(node);
            });
            g.edges().forEach(function (e) {
                datas.edges.push(g.edge(e));
            });
            //console.log('_________________',datas.nodes )
            return datas
        }
        let datas = getReladata()//keys[parseInt(Math.random() * len)])

    </script>

   
    <script>
        let popBox = document.createElement('div')
        popBox.className = "pop-box"
        document.body.appendChild(popBox)
    //
        console.time('render')
        var container, stats;
        var camera, scene, raycaster, renderer, parentTransform, sphereInter,particles;
        var mouseX = 0, mouseY = 0;
        var windowHalfX = window.innerWidth / 2;
        var windowHalfY = window.innerHeight / 2;
        var vertices = [];
        var mouse = new THREE.Vector2()

        let {centerX ,centerY} = datas.center;//datas.nodes[0].x/2
        
        
       
        

        initScene();
        drawLine();
        drawNode();
        
        animate();
        console.timeEnd('render')

        function initScene() {
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            threeBox.appendChild(renderer.domElement);
            document.addEventListener('mousemove', onDocumentMove, false);
            document.addEventListener('dblclick', onDocumentDbClick, false);
            document.addEventListener('click', onDocumentClick, false);

            camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000000);


            camera.position.set(0, 0, 2000);
            camera.lookAt(0, 0, 0);

            //
            controls = new THREE.MapControls(camera, renderer.domElement);

            controls.enableDamping = true;
            controls.dampingFactor = 0.25;

            controls.screenSpacePanning = true;

            controls.minDistance = 100;
            // controls.maxDistance = 500;

            controls.maxPolarAngle = Math.PI / 2;

            scene = new THREE.Scene();
            var light = new THREE.DirectionalLight(0xffffff, 1, 100);
            light.position.set(0, 0, 1000);
            scene.add(light);

            var geometry = new THREE.BoxBufferGeometry( 20, 20, 0 );

            
        }

        function drawNode(adjacent) {
          
           color = '#0adc8b'
           datas.nodes.map((val)=>{

               
               let  geometry = new THREE.BoxGeometry( val.width, val.height, 0 );
              
                geometry.name = val.label;//id
                geometry.cname = val.name; //中文

                //选中点的相邻颜色
                if(adjacent&&adjacent.indexOf(val.label)>-1){
                    color = '#5b18ce'
                };

                //选中点的颜色
                if(adjacent&&adjacent[0]==val.label){
                    color = 'red'
                };

                //默认查询的id颜色
                if(val.label===datas.main.label){
                    color = 'yellow'
                }
                let texture = drawText(val,color);
                color = '#0adc8b'
               var object = new THREE.Mesh( geometry,texture );

				object.position.x=val.x+centerX;
				object.position.y=val.y+centerY;
				object.position.z=0;
               
                scene.add(object);
				
           })
           
        }

        function drawLine() {
            var material = new THREE.LineBasicMaterial({ color: 0xcccccc, size: 0.5 });
            
            datas.edges.map((val) => {
                let pos = val.points
                var geometry = new THREE.Geometry();
                pos.map((v) => {
                    geometry.vertices.push(new THREE.Vector3(v.x+centerX, v.y+centerY, 0));
                })

            
                let len = pos.length
               
                let source = {
                    position:{
                        x:pos[len-2].x+centerX,
                        y:pos[len-2].y+centerY, 
                        z:0
                    }
                }
                let target = {
                     position:{
                        x:pos[len-1].x+centerX,
                        y:pos[len-1].y+centerY, 
                        z:0
                    }
                }

                var direction = new THREE.Vector3();
                direction.subVectors(target.position, source.position)
                direction.normalize()
                var end = new THREE.Vector3(target.position.x, target.position.y, target.position.z)
                var start = new THREE.Vector3( source.position.x, source.position.y, source.position.z );
                var length = end.distanceTo( start );
                var arrowHelper = new THREE.ArrowHelper( direction, start, length, 0xcccccc, 16,16);
                scene.add(arrowHelper)
               
             


                var line = new THREE.Line(geometry, material);
                scene.add(line);
            })



        }
        function getPixelRatio(context) {
            var backingStore = context.backingStorePixelRatio ||
                context.webkitBackingStorePixelRatio ||
                context.mozBackingStorePixelRatio ||
                context.msBackingStorePixelRatio ||
                context.oBackingStorePixelRatio ||
                context.backingStorePixelRatio || 1;
            return (window.devicePixelRatio || 1) / backingStore;
        };
      


        function drawText(val,color='#0adc8b'){
            let text = val.label
            var imageCanvas = document.createElement( "canvas" ),
				context = imageCanvas.getContext( "2d" );
            var ratio = 1//getPixelRatio(context);
				imageCanvas.width = val.width*ratio; //左右padding
                imageCanvas.height = val.height*ratio;
                context.scale(ratio,ratio);
               
                context.fillStyle = color;
                context.textBaseline="top"; 
                context.font = "48px Times New Roman"
				// context.strokeRect( 0, 0, 128, 128 );
                text.split('').map((t,i)=>{
                    context.fillText(t, 5+i*24*ratio, 5*ratio)
                })
             	
				context.strokeStyle = color;
                
				context.strokeRect( 0, 0, val.width, val.height );
             
				var textureCanvas = new THREE.CanvasTexture( imageCanvas );
				
				

				var	materialCanvas = new THREE.MeshBasicMaterial( { map: textureCanvas } );
			    return materialCanvas

				
        }
        function getTextWidth(ctx, str) {
            var lineWidth = 0
            for (let code of str) {
                lineWidth += ctx.measureText(code).width
            }
            return lineWidth
        }


        function animate() {

            requestAnimationFrame(animate);

            render();
            // stats.update();

        }

        function render() {

           controls.update();
           renderer.render(scene, camera);
            

        }
        function rerender(){
            scene.children = [];
            centerX = datas.center.centerX ;
            centerY = datas.center.centerY;
            drawLine();
            drawNode();
            controls.reset()
            // camera.position.set(0, 0, 2000);
            // camera.lookAt(0, 0, 0);
            console.timeEnd('rerender')
        }



        var raycaster = new THREE.Raycaster();
        let INTERSECTED = null
        function onDocumentMove(event) {

            
            event.preventDefault();

			mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
			mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

            raycaster.setFromCamera( mouse, camera );

				var intersects = raycaster.intersectObjects( scene.children );

				if ( intersects.length > 0 ) {

					INTERSECTED = intersects[ 0 ].object;
					if(INTERSECTED.type==='Mesh'){
                        let id = INTERSECTED.geometry.name
                        let detail = lists[id]
                       
                        let popHTML = `
                        <div>
                            <span>中文名：</span>
                            <span>${detail.cname}</span>
                        </div>
                        <div><span>表名：</span><span>${detail.name}</span></div>
                        <div><span>创建人：</span><span>${detail.creator}</span></div>
                       
                        <div><span>描述：</span><span>${detail.description}</span></div>
                        <div><span>上游节点：</span><span>${detail.ups}</span></div>
                        <div><span>下游节点：</span><span>${detail.downs}</span></div>
                        `
                        popBox.innerHTML = popHTML;
                        popBox.style.display = "block";
                        let {clientWidth,clientHeight} = popBox;
                        
                        popBox.style.top =`${event.clientY-clientHeight-30}px`;
                        popBox.style.left=`${event.clientX-clientWidth/2}px`
                        
                       
                    }

				} else {

					INTERSECTED = null;
                    popBox.style.display = "none";
				}



        }
        function onDocumentClick(event) {
            //return console.log(controls.getPolarAngle(),controls.noZoom)
            
            event.preventDefault();

			mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
			mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

            raycaster.setFromCamera( mouse, camera );

				var intersects = raycaster.intersectObjects( scene.children );

				if ( intersects.length > 0 ) {

					INTERSECTED = intersects[ 0 ].object;
                    
					if(INTERSECTED.type==='Mesh'){
                        let id = INTERSECTED.geometry.name
                        selectNode(id)
                       
                    }

				} else {

					INTERSECTED = null;
                    popBox.style.display = "none";
				}



        }
        function selectNode(id){
            let adjacent = [id];
                datas.edgesId.map((val)=>{
                    if(val.source===id){
                        adjacent.push(val.target)
                    }  else if(val.target===id){
                        adjacent.push(val.source)
                    } 

                })
            drawNode(adjacent)
        }

        function onDocumentDbClick(event) {

            
            event.preventDefault();

			mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
			mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;

            raycaster.setFromCamera( mouse, camera );

				var intersects = raycaster.intersectObjects( scene.children );

				if ( intersects.length > 0 ) {

					INTERSECTED = intersects[ 0 ].object;
					if(INTERSECTED.type==='Mesh'){
                        let id = INTERSECTED.geometry.name
                        getNodesData(id)
                    }

				} 



        }

        function getNodesData(id){
            datas = getReladata(id)
            rerender();
            return 
    
            // var xhr = new XMLHttpRequest();
           
            // xhr.onreadystatechange = function(){
            //     if(xhr.readyState == 4){
            //         if(xhr.status == 200){
            //             //实际操作
            //             console.time('rerender')
            //             let data = xhr.responseText
            //             datas = JSON.parse(data);
                        

            //         }
            //     }
            // }
            // //发送请求
            // xhr.open('get','/rela?id='+id,true);
            // xhr.send();
        }

    </script>
</body>

</html>