const fs = require("fs");
var request = require('superagent');
const { NODE_ENV } = process.env
exports.api = (paths, API_SET) => {  //api 文件夹，挂载api的对象



    async function explorer(path, SET) {

        return new Promise((res) => {

            //读取apis文件
            fs.readdir(path, function (err, files) {
                if (err) {
                    console.error('error:\n' + err);
                    return;
                }

                files.forEach(function (file) {
                    fs.stat(path + '/' + file, function (err, stat) {
                        if (err) { console.error(err); return; }

                        //如果是文件夹，继续循环
                        if (stat.isDirectory()) {

                            explorer(path + '/' + file);
                        } else {
                            if (/.js$/.test(file)) {

                                //读取文件
                                let _file = require(path + '/' + file)

                                //处理对应的URl
                                file = (path + '/' + file).replace(/.js$/, '').replace(paths + '/', '')
                                let env = _file[NODE_ENV];
                                let apiConfig = _file.production

                                if (typeof env === 'object') {
                                    apiConfig = Object.assign(apiConfig, env)
                                }


                                API_SET[file] = async (path, param = {}, replaceUri) => {

                                    //获取后端数据
                                    return await ajax(apiConfig, path, param, replaceUri)



                                }



                            }

                        }
                    });

                });
                res()

            });
        })
    }
    explorer(paths, API_SET);
}


function ajax(config, path, param, replaceUri = {}) {

    if (!config.config[path]) {
        return { code: -1, data: { msg: '找不到对应的api名称' } }
    }
    let api = config.config[path]; //uri配置信息
    let url = config.basePath + api.uri; //拼接后台url

    //替换模版
    for (let key in replaceUri) {
        let reg = new RegExp('{' + key + '}', 'g')

        url = url.replace(reg, replaceUri[key])
    }


    //获得请求类型
    let methodType = api.method || 'get'

    let _request = {
        url,
        param,
        method: methodType,
        header: Object.assign({
            'content-Type': 'application/x-www-form-urlencoded'
        }, api.header || {})
    }

    //如果自定义了请求数据
    config.request && (_request = config.request(_request))


    return request[methodType](_request.url)
        .query(_request.param)
        .then(function (res) {

            //如果自定义响应数据
            if (config.response) {
                return { code: 1, data: res.body }
                return config.response(res)
            }

            //默认返回数据,当successCode匹配成功或者默认不设置都直接给前端
            if (res.body.status == config.successCode ||
                config.successCode === undefined) {

                return { code: 1, data: res.body };
            } else {

                // 后端返回的数据异常时，新增与前端的标示code  。
                return {
                    code: -1,
                    msg: JSON.stringify(res.body),
                    data: ''
                }
            }



        });
    return _request

}
